# ======================================================================================
# Этап 0: Базовый образ с Java (Base Java Stage)
# Создаем общий слой с Java, который будет переиспользован.
# Это устраняет необходимость скачивать Java на каждом этапе.
# ======================================================================================
# ИСПРАВЛЕНИЕ: Используем более новую версию Alpine, в которой есть openjdk21
FROM alpine:3.20 AS java-base

# Устанавливаем JDK 21. Он будет использоваться и для сборки, и для запуска.
# Этот слой будет кэширован и переиспользован в следующих этапах.
RUN apk add --no-cache openjdk21

# Определяем переменные окружения для Java
ENV JAVA_HOME=/usr/lib/jvm/default-jvm
ENV PATH="$JAVA_HOME/bin:$PATH"


# ======================================================================================
# Этап 1: Сборка приложения (Build Stage)
# Используем наш базовый образ с уже установленной Java
# ======================================================================================
FROM java-base AS build

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем Gradle Wrapper, чтобы иметь возможность запускать команды gradle
COPY gradlew ./
COPY gradle/wrapper/ gradle/wrapper/

# Предоставляем права на выполнение сразу после копирования
RUN chmod +x ./gradlew

# Копируем файлы с определением зависимостей проекта
COPY build.gradle.kts settings.gradle.kts ./

# --- ОПТИМИЗАЦИЯ КЭШИРОВАНИЯ ---
# Загружаем зависимости. Этот слой будет взят из кэша,
# если файлы `build.gradle.kts` и `settings.gradle.kts` не изменились.
RUN ./gradlew dependencies

# Копируем исходный код приложения
COPY src ./src

# Запускаем сборку приложения.
RUN ./gradlew bootJar --no-daemon


# ======================================================================================
# Этап 2: Создание минимального образа для запуска (Run Stage)
# Используем тот же базовый образ с Java, чтобы не скачивать JRE заново
# ======================================================================================
FROM java-base

# Создаем группу и пользователя без прав root для безопасного запуска приложения
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем JAR-файл из этапа сборки и сразу меняем владельца
COPY --from=build --chown=appuser:appgroup /app/build/libs/*.jar ./app.jar

# Переключаемся на созданного пользователя
USER appuser

# Открываем порт, на котором работает приложение (замените 8080 на ваш порт)
EXPOSE 8080

# Конфигурация запуска
ENTRYPOINT ["java", "-jar", "app.jar"]

